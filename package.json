{
  "name": "service-qualification-management",
  "version": "4.0.0",
  "description": "## TMF API Reference: TMF645 - Service Qualification   Version 4.0    Service Qualification API is one of Pre-Ordering Management API Family. Service Qualification API goal is to provide service technical eligibility. Since v4 the API is split in 2 resources to distinguish specific service qualification request to be performed on a described configurated service (or a list of configured services) from a retrieval of services eligible for a given context. The API allows to manage synchronous as asynchronous eligibility response (eligibility provided in POST response or later with an id and state provided ).    ### CheckServiceQualification Resource    This resource is use to check a configured service eligibility (or a list of service). A qualification result is provided in response. Requested could ask for unavailability reason and/or for alternate proposal   ### TMF645 performs the following operations on the check service qualification resource : - Retrieve a checkServiceQualification or a collection of checkServiceQualification depending on filter criteria - Partial update of a checkServiceQualification  - Create a checkServiceQualification (including default values and creation rules) - Delete a checkServiceQualification (for administration purposes) - Manage notification on checkServiceQualification  ### Query Service Qualification resource   Query Service Qualification is used to retrieve a list of service eligible in a given request provided by requester (via searchCriteria).  ### TMF645 performs the following operations on a query service qualification resource:  - Retrieval a queryServiceQualification or a list of queryServiceQualification - Partial update of a queryServiceQualification - Creation of a queryServiceQualification - Deletion of a queryServiceQualification - Notification on queryServiceQualification   Copyright (c) TM Forum 2019. All Rights Reserved",
  "main": "index.js",
  "scripts": {
    "build": "babel src -d dist --copy-files",
    "build:start": "npm run clean && npm run build && npm start",
    "clean": "rm -f -r dist",
    "commit": "cz",
    "dev": "nodemon -w src -x npx babel-node src/index.js",
    "lint": "eslint \"src/**\"",
    "release": "standard-version",
    "start": "node dist/index.js",
    "test": "jest --config jest.config.json --detectOpenHandles"
  },
  "keywords": [
    "openapi-generator",
    "openapi"
  ],
  "license": "UNLICENSED",
  "private": true,
  "dependencies": {
    "@sendgrid/mail": "^7.4.0",
    "@slack/webhook": "^5.0.4",
    "axios": "^0.21.1",
    "body-parser": "^1.19.0",
    "cookie-parser": "^1.4.5",
    "cors": "^2.8.5",
    "debug": "^4.3.1",
    "dotenv": "^8.2.0",
    "easy-soap-request": "^3.5.0",
    "exceljs": "^4.2.0",
    "express": "^4.17.1",
    "express-openapi-validator": "^4.10.2",
    "firebase-admin": "^9.4.2",
    "joi": "^17.3.0",
    "js-yaml": "^3.14.0",
    "mailslurp-client": "^9.0.1",
    "moment": "^2.29.1",
    "mysql": "^2.18.1",
    "swagger-ui-express": "^4.1.6",
    "winston": "^3.3.3",
    "xml2js": "^0.4.23"
  },
  "devDependencies": {
    "@babel/cli": "^7.12.10",
    "@babel/core": "^7.12.10",
    "@babel/node": "^7.12.10",
    "@babel/preset-env": "^7.12.11",
    "babel-eslint": "^10.1.0",
    "commitizen": "^4.2.2",
    "cz-conventional-changelog": "^3.3.0",
    "eslint": "^7.17.0",
    "eslint-config-airbnb-base": "^14.2.1",
    "eslint-config-prettier": "^6.15.0",
    "eslint-plugin-import": "^2.22.1",
    "eslint-plugin-jest": "^24.1.3",
    "eslint-plugin-prettier": "^3.3.1",
    "jest": "^26.6.3",
    "nodemon": "^2.0.6",
    "prettier": "^2.2.1",
    "standard-version": "^9.1.0",
    "supertest": "^6.0.1"
  }
}
